<?xml version="1.0" encoding="UTF-8" ?>
<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor
     license agreements. See the NOTICE file distributed with this work for additional
     information regarding copyright ownership. The ASF licenses this file to You under
     the Apache License, Version 2.0 (the "License"); you may not use this file except in
     compliance with the License. You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software distributed under
     the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
     ANY KIND, either express or implied. See the License for the specific language
     governing permissions and limitations under the License.
  -->

<!-- This is the Solr schema file. This file should be named "schema.xml" and should be in
     the conf directory under the solr home (i.e. ./solr/conf/schema.xml by default) or
     located where the classloader for the Solr webapp can find it.

     This example schema is the recommended starting point for users. It should be kept
     correct and concise, usable out-of-the-box.

     For more information, on how to customize this file, please see:

       http://wiki.apache.org/solr/SchemaXml

     PERFORMANCE NOTE: This schema includes many optional features and should not be used
     for benchmarking. To improve performance one could:

   - Set stored="false" for all fields possible (esp large fields) when you only need to
     search on the field but don't need to return the original value.
   - Set indexed="false" if you don't need to search on the field, but only return the
     field as a result of searching on other indexed fields.
   - Remove all unneeded copyField statements.
   - For best index size and searching performance, set "index" to false for all general
     text fields, use copyField to copy them to the catchall "text" field, and use that
     for searching.
   - For maximum indexing performance, use the StreamingUpdateSolrServer Java client.
   - Remember to run the JVM in server mode, and use a higher logging level that avoids
     logging every request.
  -->

<!-- The name attribute is the name of this schema and is only used for display
     purposes. The version attribute is Solr's version number for the schema syntax and
     semantics. It should not normally be changed by applications.
  -->
<schema name="hakea" version="1.5">
 <fields>
   <field name="_version_" type="long" indexed="true" stored="true"/>

   <field name="id" type="string" indexed="true" stored="true" required="true"/>

   <!-- Catchall field, containing all other searchable text fields (implemented
        via copyField further on in this schema.
     -->
   <field name="text" type="text_general" indexed="true" stored="false" multiValued="true"/>

   <!-- Uncommenting the following will create a "timestamp" field using a default value
        of "NOW" to indicate when each document was indexed.
     -->
   <!-- <field name="timestamp" type="date" indexed="true" stored="true" default="NOW" multiValued="false"/> -->

   <!-- Dynamic field definitions allow using convention over configuration for fields via
        the specification of patterns to match field names.

        RESTRICTION: The glob-like pattern in the name attribute must have a "*" only at
                     the start or the end.
     -->
   <dynamicField name="*_i"   type="int"          indexed="true" stored="true"/>
   <dynamicField name="*_is"  type="int"          indexed="true" stored="true" multiValued="true"/>
   <dynamicField name="*_s"   type="string"       indexed="true" stored="true"/>
   <dynamicField name="*_ss"  type="string"       indexed="true" stored="true" multiValued="true"/>
   <dynamicField name="*_l"   type="long"         indexed="true" stored="true"/>
   <dynamicField name="*_ls"  type="long"         indexed="true" stored="true" multiValued="true"/>
   <dynamicField name="*_t"   type="text_general" indexed="true" stored="true"/>
   <dynamicField name="*_txt" type="text_general" indexed="true" stored="true" multiValued="true"/>
   <dynamicField name="*_en"  type="text_en"      indexed="true" stored="true" multiValued="true"/>
   <dynamicField name="*_b"   type="boolean"      indexed="true" stored="true"/>
   <dynamicField name="*_bs"  type="boolean"      indexed="true" stored="true" multiValued="true"/>
   <dynamicField name="*_f"   type="float"        indexed="true" stored="true"/>
   <dynamicField name="*_fs"  type="float"        indexed="true" stored="true" multiValued="true"/>
   <dynamicField name="*_d"   type="double"       indexed="true" stored="true"/>
   <dynamicField name="*_ds"  type="double"       indexed="true" stored="true" multiValued="true"/>

   <dynamicField name="*_dt"  type="date"         indexed="true" stored="true"/>
   <dynamicField name="*_dts" type="date"         indexed="true" stored="true" multiValued="true"/>

   <!-- Some trie-coded dynamic fields for faster range queries. -->
   <dynamicField name="*_ti"  type="tint"         indexed="true" stored="true"/>
   <dynamicField name="*_tl"  type="tlong"        indexed="true" stored="true"/>
   <dynamicField name="*_tf"  type="tfloat"       indexed="true" stored="true"/>
   <dynamicField name="*_td"  type="tdouble"      indexed="true" stored="true"/>
   <dynamicField name="*_tdt" type="tdate"        indexed="true" stored="true"/>
   <dynamicField name="*_pi"  type="pint"         indexed="true" stored="true"/>

   <dynamicField name="ignored_*" type="ignored" multiValued="true"/>
   <dynamicField name="random_*" type="random"/>

   <!-- Uncomment the following to ignore any fields that don't already match an existing
        field name or dynamic field, rather than reporting them as an error. Alternately,
        change the type="ignored" to some other type e.g. "text" if you want unknown
        fields indexed and/or stored by default.
     -->
   <!-- <dynamicField name="*" type="ignored" multiValued="true"/> -->
 </fields>

 <!-- Field to use to determine and enforce document uniqueness.

      Unless this field is marked with required="false", it will be a required field.
   -->
 <uniqueKey>id</uniqueKey>

 <!-- DEPRECATED: The defaultSearchField is consulted by various query parsers when
      parsing a query string that isn't explicit about the field. Machine (non-user)
      generated queries are best made explicit, or they can use the "df" request parameter
      which takes precedence over this.

      Note: Un-commenting defaultSearchField will be insufficient if your request handler
      in solrconfig.xml defines "df", which takes precedence. That would need to be
      removed.
   -->
 <!-- <defaultSearchField>text</defaultSearchField> -->

 <!-- DEPRECATED: The defaultOperator (AND|OR) is consulted by various query parsers when
      parsing a query string to determine if a clause of the query should be marked as
      required or optional, assuming the clause isn't already marked by some operator.

      The default is OR, which is generally assumed so it is not a good idea to change it
      globally here. The "q.op" request parameter takes precedence over this.
    -->
 <!-- <solrQueryParser defaultOperator="OR"/> -->

  <types>
    <fieldType name="string" class="solr.StrField" sortMissingLast="true"/>
    <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true"/>

    <!-- Default numeric field types. For faster range queries, consider the
         tint/tfloat/tlong/tdouble types.
      -->
    <fieldType name="int" class="solr.TrieIntField" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="float" class="solr.TrieFloatField" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="long" class="solr.TrieLongField" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="double" class="solr.TrieDoubleField" precisionStep="0" positionIncrementGap="0"/>

    <!-- Numeric field types that index each value at various levels of precision to
         accelerate range queries when the number of values between the range endpoints is
         large. See the javadoc for NumericRangeQuery for internal implementation details.

         Smaller precisionStep values (specified in bits) will lead to more tokens indexed
         per value, slightly larger index size, and faster range queries. A precisionStep
         of 0 disables indexing at different precision levels.
      -->
    <fieldType name="tint" class="solr.TrieIntField" precisionStep="8" positionIncrementGap="0"/>
    <fieldType name="tfloat" class="solr.TrieFloatField" precisionStep="8" positionIncrementGap="0"/>
    <fieldType name="tlong" class="solr.TrieLongField" precisionStep="8" positionIncrementGap="0"/>
    <fieldType name="tdouble" class="solr.TrieDoubleField" precisionStep="8" positionIncrementGap="0"/>

    <!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and is a more
         restricted form of the canonical representation of dateTime
         http://www.w3.org/TR/xmlschema-2/#dateTime.

         The trailing "Z" designates UTC time and is mandatory. Optional fractional
         seconds are allowed:

           1995-12-31T23:59:59.999Z

         All other components are mandatory.

         Expressions can also be used to denote calculations that should be performed
         relative to "NOW" to determine the value, for example:

               NOW/HOUR
                  ... Round to the start of the current hour.

               NOW-1DAY
                  ... Exactly 1 day prior to now.

               NOW/DAY+6MONTHS+3DAYS
                  ... 6 months and 3 days in the future from the start of the current day.

         Consult the DateField javadocs for more information.

         NOTE: For faster range queries, consider the tdate type.
      -->
    <fieldType name="date" class="solr.TrieDateField" precisionStep="0" positionIncrementGap="0"/>

    <!-- A Trie based date field for faster date range queries and date faceting. -->
    <fieldType name="tdate" class="solr.TrieDateField" precisionStep="6" positionIncrementGap="0"/>

    <!--Binary data type. The data should be sent/retrieved in as Base64 encoded Strings -->
    <fieldtype name="binary" class="solr.BinaryField"/>

    <!-- These should only be used for compatibility with existing indexes (created with
         lucene or older Solr versions).

         Use Trie based fields instead. As of Solr 3.5 and 4.x, Trie based fields support sortMissingFirst/Last

         Plain numeric field types that store and index the text value verbatim (and hence
         don't correctly support range queries, since the lexicographic ordering isn't
         equal to the numeric ordering).
      -->
    <fieldType name="pint" class="solr.IntField"/>
    <fieldType name="plong" class="solr.LongField"/>
    <fieldType name="pfloat" class="solr.FloatField"/>
    <fieldType name="pdouble" class="solr.DoubleField"/>
    <fieldType name="pdate" class="solr.DateField" sortMissingLast="true"/>

    <!-- The "RandomSortField" is not used to store or search any data. You can declare
         fields of this type it in your schema to generate pseudo-random orderings of your
         docs for sorting or function purposes. The ordering is generated based on the
         field name and the version of the index. As long as the index version remains
         unchanged, and the same field name is reused, the ordering of the docs will be
         consistent.

         If you want different psuedo-random orderings of documents, for the same version
         of the index, use a dynamicField and change the field name in the request.
      -->
    <fieldType name="random" class="solr.RandomSortField" indexed="true"/>

    <!-- solr.TextField allows the specification of custom text analyzers specified as a
         tokenizer and a list of token filters. Different analyzers may be specified for
         indexing and querying.

         The optional positionIncrementGap puts space between multiple fields of this type
         on the same document, with the purpose of preventing false phrase matching across
         fields.

         For more info on customizing your analyzer chain, please see:

           http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters
      -->

    <!-- One can also specify an existing Analyzer class that has a default constructor
         via the class attribute on the analyzer element.

         Example:

           <fieldType name="text_greek" class="solr.TextField">
             <analyzer class="org.apache.lucene.analysis.el.GreekAnalyzer"/>
           </fieldType>
      -->

    <!-- A text field that only splits on whitespace for exact matching of words. -->
    <fieldType name="text_ws" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
      </analyzer>
    </fieldType>

    <!-- A general text field that has reasonable, generic cross-language defaults:

         It tokenizes with StandardTokenizer, removes stop words from case-insensitive
         "stopwords.txt" (empty by default), and down cases. At query time only, it also
         applies synonyms.
      -->
    <fieldType name="text_general" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true"/>
        <!-- <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/> -->
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- A text field with defaults appropriate for English:

         It tokenizes with StandardTokenizer, removes English stop words
         (lang/stopwords_en.txt), down cases, protects words from protwords.txt, and
         finally applies Porter's stemming. The query time analyzer also applies synonyms
         from synonyms.txt.
      -->
    <fieldType name="text_en" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <!-- <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/> -->
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt" enablePositionIncrements="true"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.EnglishPossessiveFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <!-- <filter class="solr.EnglishMinimalStemFilterFactory"/> -->
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt" enablePositionIncrements="true"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.EnglishPossessiveFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <!-- <filter class="solr.EnglishMinimalStemFilterFactory"/> -->
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- A text field with defaults appropriate for English, plus aggressive
         word-splitting and autophrase features enabled. This field is just like text_en,
         except it adds WordDelimiterFilter to enable splitting and matching of words on
         case-change, alpha numeric boundaries, and non-alphanumeric chars. This means
         certain compound word cases will work, for example query "wi fi" will match
         document "WiFi" or "wi-fi".
      -->
    <fieldType name="text_en_splitting" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
      <analyzer type="index">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <!-- <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/> -->
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt" enablePositionIncrements="true"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="1"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt" enablePositionIncrements="true"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- Less flexible matching, but less false matches. Probably not ideal for product
         names, but may be good for SKUs. Can insert dashes in the wrong place and still
         match.
      -->
    <fieldType name="text_en_splitting_tight" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <filter class="solr.EnglishMinimalStemFilterFactory"/>
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- Just like text_general except it reverses the characters of each token, to enable
         more efficient leading wildcard queries.
      -->
    <fieldType name="text_general_rev" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.ReversedWildcardFilterFactory" withOriginal="true" maxPosAsterisk="3" maxPosQuestion="2" maxFractionAsterisk="0.33"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>

    <fieldType name="text_path" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.PathHierarchyTokenizerFactory"/>
      </analyzer>
    </fieldType>

    <fieldtype name="phonetic" stored="false" indexed="true" class="solr.TextField">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.DoubleMetaphoneFilterFactory" inject="false"/>
      </analyzer>
    </fieldtype>

    <fieldType name="lowercase" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- Since fields of this type are by default not stored or indexed, any data added to
         them will be ignored outright.
      -->
    <fieldtype name="ignored" stored="false" indexed="false" multiValued="true" class="solr.StrField"/>
  </types>
</schema>
